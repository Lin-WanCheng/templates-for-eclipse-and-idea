<?xml version="1.0" encoding="UTF-8" standalone="no"?><templates><template autoinsert="true" context="java" deleted="false" description=" Spring @RunWith(SpringJUnit4ClassRunner" enabled="true" name="runwithspring">@RunWith(SpringJUnit4ClassRunner.class)&#13;
@ContextConfiguration("classpath:applicationContext.xml")${:import(&#13;
org.junit.runner.RunWith,&#13;
org.springframework.test.context.ContextConfiguration,&#13;
org.springframework.test.context.junit4.SpringJUnit4ClassRunner&#13;
)}</template><template autoinsert="true" context="java" deleted="false" description=" Spring Data" enabled="true" name="query">@Query(value="")${:import(org.springframework.data.jpa.repository.Query,java.util.List)}&#13;
List&lt;&gt; ${findById}(${String} id);</template><template autoinsert="true" context="java" deleted="false" description=" Spring Data query update" enabled="true" name="queryupdate">@Query("update ${elemType} set ${var}=?2 where ${id}=?1")${:import(org.springframework.data.jpa.repository.Query)}&#13;
@Modifying&#13;
void update${Var}(String ${id}, String ${var});</template><template autoinsert="true" context="java" deleted="false" description=" Spring Data querySQL" enabled="true" name="querySQL">@Query(value="${cursor}",&#13;
       nativeQuery=true)${:import(org.springframework.data.jpa.repository.Query,java.util.List)}&#13;
List&lt;Object[]&gt; ${newName}();</template><template autoinsert="true" context="java" deleted="false" description=" Spring Data spec" enabled="true" name="speces">Specification&lt;${elemType}&gt; spec = new Specification&lt;${elemType}&gt;() {&#13;
    public Predicate toPredicate(Root&lt;${elemType}&gt; root, CriteriaQuery&lt;?&gt; query, CriteriaBuilder cb) {&#13;
        return cb.equal(root.get("${fieldName}").as(${String}.class), ${value});&#13;
    }&#13;
};${:import(&#13;
org.springframework.data.jpa.domain.Specification,&#13;
javax.persistence.criteria.CriteriaBuilder,&#13;
javax.persistence.criteria.CriteriaQuery,&#13;
javax.persistence.criteria.Predicate,&#13;
javax.persistence.criteria.Root)}</template><template autoinsert="true" context="java" deleted="false" description=" Spring Data spec" enabled="true" name="speceI">Specification&lt;${elemType}&gt; spec = new Specification&lt;${elemType}&gt;() {&#13;
    public Predicate toPredicate(Root&lt;${elemType}&gt; root, CriteriaQuery&lt;?&gt; query, CriteriaBuilder cb) {&#13;
        return cb.equal(root.get("${fieldName}").as(${Integer}.class), ${value});&#13;
    }&#13;
};${:import(&#13;
org.springframework.data.jpa.domain.Specification,&#13;
javax.persistence.criteria.CriteriaBuilder,&#13;
javax.persistence.criteria.CriteriaQuery,&#13;
javax.persistence.criteria.Predicate,&#13;
javax.persistence.criteria.Root)}</template><template autoinsert="true" context="java" deleted="false" description=" Spring Data spec" enabled="true" name="speclike">Specification&lt;${elemType}&gt; spec = new Specification&lt;${elemType}&gt;() {&#13;
    public Predicate toPredicate(Root&lt;${elemType}&gt; root, CriteriaQuery&lt;?&gt; query, CriteriaBuilder cb) {&#13;
        List&lt;Predicate&gt; ps = new ArrayList&lt;&gt;();&#13;
        if (${model} != null) {&#13;
            // 条件1&#13;
            if (StringUtils.isNoneBlank(${model}.${getter})) {&#13;
                ps.add(cb.like(root.get("${fieldName}").as(String.class), "%"+${model}.${getter}+"%"));&#13;
            }&#13;
        }&#13;
        return cb.and(ps.toArray(new Predicate[ps.size()]));&#13;
    }&#13;
};${:import(&#13;
java.util.ArrayList,&#13;
java.util.List,&#13;
org.springframework.data.jpa.domain.Specification,&#13;
javax.persistence.criteria.CriteriaBuilder,&#13;
javax.persistence.criteria.CriteriaQuery,&#13;
javax.persistence.criteria.Predicate,&#13;
javax.persistence.criteria.Root)}</template></templates>